version: 2.1

orbs:
  orb-update: sawadashota/orb-update@volatile
  orb-update-alpha: sawadashota/orb-update@dev:alpha
  docker: circleci/docker@0.5.20
  orb-tools: circleci/orb-tools@9.0.0
  envsubst: sawadashota/envsubst@1.1.0

parameters:
  run-integration-tests:
    type: boolean
    default: false
  dev-orb-version:
    type: string
    default: "dev:alpha"

executors:
  golang:
    docker:
      - image: circleci/golang:1.13
  circleci-cli:
    docker:
      - image: circleci/circleci-cli:latest

commands:
  download-go-mod:
    steps:
      - restore_cache:
          name: Restore go modules cache
          keys:
            - mod-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          name: Save go modules cache
          key: mod-{{ checksum "go.sum" }}
          paths:
            - /go/pkg/mod/cache
      - run: go mod verify

  build-go:
    steps:
      - download-go-mod
      - run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 GO111MODULE=on go build

  close-test-pr:
    description: Close and delete branches created in tests
    steps:
      - add_ssh_keys:
          fingerprints:
            - "53:6e:9e:8d:ce:8d:a1:55:63:ef:98:f0:38:38:fe:77"
      - run: git fetch
      - run:
          name: Close test PR
          command: |
            git branch -r \
              | grep origin/orb-update-alpha/ \
              | sed -e "s/origin\///g" \
              | xargs -I{} git push --delete origin {}

jobs:
  test-go:
    executor: golang
    steps:
      - checkout
      - download-go-mod
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Report to Code Climate before testing
          command: ./cc-test-reporter before-build
      - run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      - run:
          name: Report to Code Climate after testing
          command: ./cc-test-reporter after-build

      - run: go tool cover -html coverage.txt -o coverage.html
      - run:
          name: Send result codecov
          command: bash <(curl -s https://codecov.io/bash) -t ${CODECOV_TOKEN}
      - store_artifacts:
          path: coverage.html
          destination: coverage.html

  release-binary:
    docker:
      - image: goreleaser/goreleaser:v0.123
    steps:
      - checkout
      - download-go-mod
      - run: goreleaser

  pack-orb:
    environment:
      DOCKER_LATEST_TAG: latest
      ORB_LATEST_TAG: volatile
    parameters:
      docker_image_latest_tag:
        description: Latest docker image tag of orb-update
        type: env_var_name
        default: CIRCLE_TAG
      orb_latest_version:
        description: Latest orb version of orb-update
        type: env_var_name
        default: CIRCLE_TAG
    executor: circleci-cli
    steps:
      - checkout
      - attach_workspace:
          at: .
      - envsubst/install
      - run:
          name: Embed environment variables to orb.yml
          command: |
            ENVSUBST_ORB_UPDATE_DOCKER_TAG=${<< parameters.docker_image_latest_tag >>} \
              ENVSUBST_ORB_VERSION=${<< parameters.orb_latest_version >>} \
              envsubst < circleci-orb/src/@orb.template.yml > circleci-orb/src/@orb.yml
      - orb-tools/pack:
          destination: circleci-orb/packed/orb.yml
          source: circleci-orb/src/
      - orb-tools/validate:
          orb-path: circleci-orb/packed/orb.yml
      - persist_to_workspace:
          root: .
          paths:
            - circleci-orb/packed/orb.yml
      - store_artifacts:
          path: circleci-orb/packed/orb.yml
          destination: orb.yml

dev_filters: &dev_filters
  branches:
    ignore: /^orb-update\/circleci\/test\/.*/

release_filters: &release_filters
  tags:
    only: /.*/
  branches:
    ignore: /.*/

workflows:
  version: 2
  dev:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - test-go:
          filters: *dev_filters
      - docker/publish:
          name: publish-docker-image-dev
          filters: *dev_filters
          deploy: true
          image: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
          tag: dev-${CIRCLE_SHA1}
          docker-username: DOCKER_LOGIN
          docker-password: DOCKER_PASSWORD
          executor: golang
          use-remote-docker: true
          before_build: [build-go]
      - docker/hadolint:
          name: hadolint-dev
          filters: *dev_filters
          # https://github.com/hadolint/hadolint/wiki/DL3018
          ignore-rules: DL3018
      - pack-orb:
          name: pack-orb-dev
          filters: *dev_filters
          docker_image_latest_tag: DOCKER_LATEST_TAG
          orb_latest_version: ORB_LATEST_TAG
      - orb-tools/publish-dev:
          name: publish-orb-dev
          context: orb-publishing
          requires: [pack-orb-dev]
          orb-name: sawadashota/orb-update
          orb-path: circleci-orb/packed/orb.yml
          publish-token-variable: CIRCLE_TOKEN
          validate: true
          checkout: false
          attach-workspace: true
          workspace-root: .
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-workflow-dev
          context: orb-publishing
          requires: [publish-orb-dev, publish-docker-image-dev]

  integration_dev:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      - pack-orb:
          name: pack-integration_dev
          docker_image_latest_tag: DOCKER_LATEST_TAG
          orb_latest_version: ORB_LATEST_TAG
      - orb-tools/test-in-builds:
          name: test-in-builds-integration_dev
          context: orb-update
          requires: [pack-integration_dev]
          orb-name: orb-update-alpha
          orb-location: workspace/circleci-orb/packed/orb.yml
          attach-workspace: true
          test-steps:
            - checkout
            - envsubst/install
            - run:
                name: Embed environment variables to .circleci/test/.orb-update.yml
                command: |
                  ENVSUBST_BASE_BRANCH=${CIRCLE_BRANCH} \
                    envsubst < .circleci/test/.orb-update.template.yml > .circleci/test/.orb-update.yml
            - orb-update-alpha/default-config:
                config: .circleci/test/.orb-update.yml
            - orb-update-alpha/orb-update:
                config: .circleci/test/.orb-update.yml
                docker_image_version: dev-${CIRCLE_SHA1}
            - close-test-pr

  master:
    jobs:
      - docker/publish:
          name: publish-docker-image-master
          filters:
            branches:
              only: master
          deploy: true
          image: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
          tag: latest
          docker-username: DOCKER_LOGIN
          docker-password: DOCKER_PASSWORD
          executor: golang
          use-remote-docker: true
          before_build: [build-go]

  release:
    jobs:
      - release-binary:
          context: goreleaser
          filters: *release_filters
      - docker/publish:
          name: publish-docker-image
          filters: *release_filters
          deploy: true
          image: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
          tag: ${CIRCLE_TAG}
          docker-username: DOCKER_LOGIN
          docker-password: DOCKER_PASSWORD
          executor: golang
          use-remote-docker: true
          before_build: [build-go]
      - pack-orb:
          name: pack-relase-orb
          filters: *release_filters
          docker_image_latest_tag: CIRCLE_TAG
          orb_latest_version: CIRCLE_TAG
      - orb-tools/publish:
          name: publish-orb
          filters: *release_filters
          context: orb-publishing
          requires: [publish-docker-image, pack-relase-orb]
          orb-ref: sawadashota/orb-update@${CIRCLE_TAG}
          orb-path: circleci-orb/packed/orb.yml
          publish-token-variable: CIRCLE_TOKEN
          validate: true
          checkout: false
          attach-workspace: true
          workspace-root: .

  orb-update:
    jobs:
      - orb-update/orb-update:
          context: orb-update
          name: daily-orb-update
    triggers:
      - schedule:
          cron: "0 10 * * *"  # minute hour day month week (UTC)
          filters:
            branches:
              only:
                - master
